import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

# Load dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Normalize data
x_train = x_train.astype("float32") / 255.0
x_test = x_test.astype("float32") / 255.0

# Reshape to (samples, 784)
x_train = x_train.reshape(-1, 28 * 28)
x_test = x_test.reshape(-1, 28 * 28)

# Build model
model = models.Sequential([
    layers.Dense(128, activation="relu", input_shape=(784,)),
    layers.Dense(64, activation="relu"),
    layers.Dense(10, activation="softmax")
])

# Compile model
model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])

# Train model
model.fit(x_train, y_train, 
          epochs=5, 
          batch_size=32, 
          validation_split=0.1, 
          verbose=2)

# Evaluate model
test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print("\n Test accuracy:", test_acc)

# Show predictions on first 10 test images
predictions = model.predict(x_test[:10])

plt.figure(figsize=(10, 3))
for i in range(10):
    plt.subplot(2, 5, i + 1)
    plt.imshow(x_test[i].reshape(28, 28), cmap="gray")
    plt.title(f"Pred: {predictions[i].argmax()}\nTrue: {y_test[i]}")
    plt.axis("off")
plt.show()
